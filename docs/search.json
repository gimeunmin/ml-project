[
  {
    "objectID": "project2.html",
    "href": "project2.html",
    "title": "Project2 : 붓꽃 분류",
    "section": "",
    "text": "# 라이브러리 불러오기\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndf = sns.load_dataset(\"iris\")\n\n\ndf\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n# 결측값 확인\ndf.isna().sum()\n\nsepal_length    0\nsepal_width     0\npetal_length    0\npetal_width     0\nspecies         0\ndtype: int64\n\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\nk_range = range(1, 20, 2)\nk_scores = []\n\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn, X_train, y_train, cv=5, scoring='accuracy')\n    k_scores.append(scores.mean())\n    print(f'k={k}일 때 정확도 : {scores.mean():.3f}')\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-10-dccf6c3c8f46&gt; in &lt;module&gt;\n      7 for k in k_range:\n      8     knn = KNeighborsClassifier(n_neighbors=k)\n----&gt; 9     scores = cross_val_score(knn, X_train, y_train, cv=5, scoring='accuracy')\n     10     k_scores.append(scores.mean())\n     11     print(f'k={k}일 때 정확도 : {scores.mean():.3f}')\n\nNameError: name 'X_train' is not defined\n\n\n\n\nbest_k = k_range[k_scores.index(max(k_scores))]\nprint(f\"최적의 k의 값은 {best_k}이며, 평균 정확도는 {max(k_scores):.3f}\")\n\n\nknn = from sklearn.neighbors import KNeighborsClassifier(n_neighbors=k)\nknn.flt(X_train, y_train)\n\ny_pred = knn.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\n\n\n  File \"&lt;ipython-input-7-478f26fe98a6&gt;\", line 1\n    knn = from sklearn.neighbors import KNeighborsClassifier(n_neighbors=k)\n          ^\nSyntaxError: invalid syntax"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ml-project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "20250722.html",
    "href": "20250722.html",
    "title": "ml-project",
    "section": "",
    "text": "# Matplotlib 라이브러리의 pylot 모듈 불러오기\nimport matplotlib.pyplot as plt\n\n\nimport numpy as np\nimport pandas as pd\n\n\n# 시각화 옵션1 : 제목\nplt.figure(figsize=(5, 3))\nplt.title('Line Graph')\nxdata = [3, 5, 7, 9]\nydata = [2, 4, 6, 8]\nplt.plot(xdata, ydata)\nplt.show()\n\n\n\n\n\n\n\n\n\n# 시각화 옵션2 : 범례\n# plot()의 label 속성에 범례에 표시할 문자열을 작성\nplt.figure(figsize=(5, 3))\nplt.title('Legend Properties')\ndata1 = [1, 3, 5, 7]\ndata2 = [9, 7, 5, 3]\nplt.plot(data1, label='Salary')\nplt.plot(data2, label='Prices')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n# 시각화 옵션3 : 색상\n# plot()의 color 속성에 색상 설정\nplt.figure(figsize=(5, 3))\nplt.title('Color Properties')\nxdata = [3, 5, 7, 9]\nydata = [1, 3, 5, 7]\nplt.plot(xdata, ydata, color='#347497') # fsfss\nplt.show()\n\n\n\n\n\n\n\n\n\n# 데이터 불러오기\ndata = pd.read_csv('/content/data/04_data1.csv')\ndata.head()\n\n\n    \n\n\n\n\n\n\narea\n2015_good\n2016_good\n2017_good\n2018_good\n2019_good\n2020_good\n2015_common\n2016_common\n2017_common\n...\n2017_bad\n2018_bad\n2019_bad\n2020_bad\n2015_verybad\n2016_verybad\n2017_verybad\n2018_verybad\n2019_verybad\n2020_verybad\n\n\n\n\n0\nNationwide\n72.0\n54\n84\n135\n117\n171\n267.0\n297\n265\n...\n14\n21\n16\n0\n1.0\n2\n2\n0\n1\n0\n\n\n1\nMetropolitan\n72.0\n45\n77\n126\n109\n150\n259.0\n290\n260\n...\n26\n22\n27\n4\n4.0\n2\n2\n0\n3\n0\n\n\n2\nSeoul\n97.0\n65\n113\n140\n139\n168\n243.0\n277\n230\n...\n20\n21\n25\n5\n4.0\n1\n2\n0\n3\n0\n\n\n3\nBusan\n102.0\n89\n86\n136\n163\n208\n242.0\n259\n269\n...\n10\n16\n9\n2\n1.0\n2\n0\n1\n0\n0\n\n\n4\nDaegu\n90.0\n103\n111\n155\n148\n176\n248.0\n246\n244\n...\n10\n13\n17\n4\n1.0\n1\n0\n1\n0\n0\n\n\n\n\n5 rows × 25 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\nimport os\nos.getcwd()\n\n'/content'\n\n\n\n# 시각화 옵션4 : x축 및 y축 이름\nplt.figure(figsize=(5, 3))\nplt.title('Axis name Properties')\nxdata = [3, 5, 7, 9]\nydata = [1, 3, 5, 7]\nplt.plot(xdata, ydata)\nplt.xlabel('X value')\nplt.ylabel('Y value')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 시각화 옵션5 : 그래프 선 모양\n# plot()의 linestyle 속성에 선 모양을 '-', '--', '-.', ':' 등으로 설정\nplt.title('Line shape Properties')\ndata1 = [1, 3, 5, 7]\ndata2 = [9, 7, 5, 3]\n\nplt.figure(figsize=(6, 4))\nplt.plot(data1, color='b', linestyle='--', label='dashed')\nplt.plot(data2, 'r:', label='dotted')\nplt.legend()\nplt.show()\n\n\n# 시각화 옵션6 : 그림 범위 지정\nxdata = [15, 25, 35, 45]\nydata = [2, 4, 6, 8]\n\nplt.figure(figsize=(3, 2))\nplt.plot(xdata, ydata, color='m', marker='s')\n#색상, 선, 모양, 마커를 한번에 설정할 수 있음\n#색상: r g b c m y k w\n#선 모양: -, --, -., :\n#마커 : + , . o v ^ s\nplt.plot(xdata, ydata, ':oy')\n\nplt.xlim(10, 50)\nplt.ylim(0, 10)\nplt.show()\n\n\n\n\n\n\n\n\n\n# 시각화 옵션7 : 내장 시각화 옵션\n# Pandas 라이브러리의 plot() 메소드를 이용하여 그래프를 그릴 수 있음\nmy_score = [[60, 90, 95], [65, 85, 90], [80, 75, 100],\n            [95, 90, 85], [85, 80, 65]]\nsubject = ['1st', '2nd', '3rd']\ndf = pd.DataFrame(my_score, columns=subject)\n\n# 선 그래프\ndf.plot(kind='line', figsize=(5, 3))\nplt.show()\n\n\n\n\n\n\n\n\n\n# 상자수염 그래프\ndf.plot(kind='box', figsize=(5, 3))\nplt.show()\n\n\n\n\n\n\n\n\n\n# 데이터 불러오기\nfrom google.colab import files\nuploaded = files.upload()\nimport os, shutil\nos.makedirs('data', exist_ok=True)\nfor fname in uploaded.keys():\n    shutil.move(fname, f\"data/{fname}\")\ndata = pd.read_csv('./data/04_data1.csv')\ndata.head()\n\n\n     \n     \n      Upload widget is only available when the cell has been executed in the\n      current browser session. Please rerun this cell to enable.\n      \n       \n\n\nSaving 04_data1.csv to 04_data1.csv\n\n\n\n    \n\n\n\n\n\n\narea\n2015_good\n2016_good\n2017_good\n2018_good\n2019_good\n2020_good\n2015_common\n2016_common\n2017_common\n...\n2017_bad\n2018_bad\n2019_bad\n2020_bad\n2015_verybad\n2016_verybad\n2017_verybad\n2018_verybad\n2019_verybad\n2020_verybad\n\n\n\n\n0\nNationwide\n72.0\n54\n84\n135\n117\n171\n267.0\n297\n265\n...\n14\n21\n16\n0\n1.0\n2\n2\n0\n1\n0\n\n\n1\nMetropolitan\n72.0\n45\n77\n126\n109\n150\n259.0\n290\n260\n...\n26\n22\n27\n4\n4.0\n2\n2\n0\n3\n0\n\n\n2\nSeoul\n97.0\n65\n113\n140\n139\n168\n243.0\n277\n230\n...\n20\n21\n25\n5\n4.0\n1\n2\n0\n3\n0\n\n\n3\nBusan\n102.0\n89\n86\n136\n163\n208\n242.0\n259\n269\n...\n10\n16\n9\n2\n1.0\n2\n0\n1\n0\n0\n\n\n4\nDaegu\n90.0\n103\n111\n155\n148\n176\n248.0\n246\n244\n...\n10\n13\n17\n4\n1.0\n1\n0\n1\n0\n0\n\n\n\n\n5 rows × 25 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\n# '2015~2020년 미세먼지 좋음' 일수만 가져옴\ngood = data.copy()\ngood = good[['area', '2015_good', '2016_good', '2017_good', '2018_good', '2019_good', '2020_good']]\ngood.index = good['area']\ngood.drop(columns='area', inplace=True)\n\n#plt.plot(연도, 일수)\n\n\ngood = good.T\n\n\n# 인덱스를 연도로 수정\ngood.columns.name = 'year'\ngood.index = range(2015, 2021)\ngood\n\n\n    \n\n\n\n\n\nyear\nNationwide\nMetropolitan\nSeoul\nBusan\nDaegu\nIncheon\nGwangju\nDaejeon\nUlsan\nSejong\nGyeonggi\nGangwon\nChungbuk\nChungnam\nJeonbuk\nJeonnam\nGyeongbuk\nGyeongnam\nJeju\n\n\n\n\n2015\n72.0\n72.0\n97.0\n102.0\n90.0\n67.0\n122.0\n111.0\n101.0\nNaN\n65.0\n77.0\n90.0\n94.0\n86.0\n142.0\n101.0\n76.0\n84.0\n\n\n2016\n54.0\n45.0\n65.0\n89.0\n103.0\n49.0\n151.0\n92.0\n101.0\n65.0\n45.0\n65.0\n99.0\n65.0\n58.0\n166.0\n123.0\n75.0\n138.0\n\n\n2017\n84.0\n77.0\n113.0\n86.0\n111.0\n78.0\n134.0\n83.0\n104.0\n69.0\n59.0\n108.0\n106.0\n74.0\n69.0\n160.0\n124.0\n93.0\n166.0\n\n\n2018\n135.0\n126.0\n140.0\n136.0\n155.0\n140.0\n149.0\n121.0\n162.0\n130.0\n123.0\n150.0\n117.0\n144.0\n121.0\n191.0\n129.0\n136.0\n202.0\n\n\n2019\n117.0\n109.0\n139.0\n163.0\n148.0\n115.0\n117.0\n143.0\n173.0\n127.0\n97.0\n159.0\n113.0\n96.0\n108.0\n193.0\n142.0\n136.0\n176.0\n\n\n2020\n171.0\n150.0\n168.0\n208.0\n176.0\n182.0\n210.0\n182.0\n206.0\n165.0\n137.0\n219.0\n164.0\n145.0\n171.0\n247.0\n212.0\n220.0\n220.0\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nplt.figure(figsize=(10, 3))\nplt.plot(good['Jeonbuk'], 'o-m', label='Jeonbuk')\nplt.plot(good['Nationwide'], 'o--k', label='Nationwide')\n\n\n\n\n\n\n\n\n\nverybad2015\n\n\n    \n\n\n\n\n\n\narea\n2015_good\n2016_good\n2017_good\n2018_good\n2019_good\n2020_good\n2015_common\n2016_common\n2017_common\n...\n2017_bad\n2018_bad\n2019_bad\n2020_bad\n2015_verybad\n2016_verybad\n2017_verybad\n2018_verybad\n2019_verybad\n2020_verybad\n\n\n\n\n0\nNationwide\n72.0\n54\n84\n135\n117\n171\n267.0\n297\n265\n...\n14\n21\n16\n0\n1.0\n2\n2\n0\n1\n0\n\n\n1\nMetropolitan\n72.0\n45\n77\n126\n109\n150\n259.0\n290\n260\n...\n26\n22\n27\n4\n4.0\n2\n2\n0\n3\n0\n\n\n2\nSeoul\n97.0\n65\n113\n140\n139\n168\n243.0\n277\n230\n...\n20\n21\n25\n5\n4.0\n1\n2\n0\n3\n0\n\n\n3\nBusan\n102.0\n89\n86\n136\n163\n208\n242.0\n259\n269\n...\n10\n16\n9\n2\n1.0\n2\n0\n1\n0\n0\n\n\n4\nDaegu\n90.0\n103\n111\n155\n148\n176\n248.0\n246\n244\n...\n10\n13\n17\n4\n1.0\n1\n0\n1\n0\n0\n\n\n5\nIncheon\n67.0\n49\n78\n140\n115\n182\n256.0\n299\n264\n...\n21\n18\n21\n2\n2.0\n2\n2\n0\n2\n0\n\n\n6\nGwangju\n122.0\n151\n134\n149\n117\n210\n220.0\n200\n216\n...\n12\n21\n19\n0\n2.0\n4\n3\n2\n2\n0\n\n\n7\nDaejeon\n111.0\n92\n83\n121\n143\n182\n225.0\n255\n268\n...\n12\n24\n21\n1\n1.0\n2\n2\n1\n3\n0\n\n\n8\nUlsan\n101.0\n101\n104\n162\n173\n206\n242.0\n252\n250\n...\n10\n18\n11\n2\n1.0\n2\n1\n1\n0\n0\n\n\n9\nSejong\nNaN\n65\n69\n130\n127\n165\nNaN\n285\n279\n...\n15\n19\n24\n4\nNaN\n1\n2\n1\n5\n0\n\n\n10\nGyeonggi\n65.0\n45\n59\n123\n97\n137\n261.0\n285\n269\n...\n35\n26\n32\n6\n4.0\n2\n2\n0\n3\n0\n\n\n11\nGangwon\n77.0\n65\n108\n150\n159\n219\n260.0\n285\n241\n...\n15\n16\n11\n3\n3.0\n2\n1\n0\n1\n0\n\n\n12\nChungbuk\n90.0\n99\n106\n117\n113\n164\n236.0\n243\n242\n...\n15\n27\n23\n3\n1.0\n1\n2\n1\n1\n0\n\n\n13\nChungnam\n94.0\n65\n74\n144\n96\n145\n244.0\n286\n271\n...\n18\n19\n17\n6\n2.0\n2\n2\n0\n3\n0\n\n\n14\nJeonbuk\n86.0\n58\n69\n121\n108\n171\n239.0\n274\n269\n...\n24\n32\n22\n1\n3.0\n3\n3\n0\n3\n0\n\n\n15\nJeonnam\n142.0\n166\n160\n191\n193\n247\n214.0\n191\n201\n...\n1\n10\n6\n0\n1.0\n0\n3\n0\n0\n0\n\n\n16\nGyeongbuk\n101.0\n123\n124\n129\n142\n212\n246.0\n235\n232\n...\n9\n21\n17\n2\n1.0\n1\n0\n1\n0\n0\n\n\n17\nGyeongnam\n76.0\n75\n93\n136\n136\n220\n271.0\n274\n264\n...\n8\n13\n10\n0\n1.0\n2\n0\n1\n0\n0\n\n\n18\nJeju\n84.0\n138\n166\n202\n176\n220\n259.0\n211\n192\n...\n5\n14\n9\n2\n2.0\n0\n2\n0\n1\n0\n\n\n\n\n19 rows × 25 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n# '2015년 미세먼지 매우 나쁨' 일수만 가져오기\nimport matplotlib.pyplot as verybad2015\nverybad2015 = data.copy()\nverybad2015 = verybad2015[['area', '2015_verybad']]\nverybad2015\nverybad2015.columns = ['area', 'count']\nverybad2015.head()\n\nverybad2015.sort_values('count', inplace=True)\n\nplt.figure(figsize=(3, 5))\nplt.bar(verybad2015['area'], verybad2015['count'])\n#plt.bar(verybad2015['area'], verybad2015['count']) #세로 가로\n\nplt.xlabel('Count')\nplt.show()\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/tmp/ipython-input-1-1242113129.py in &lt;cell line: 0&gt;()\n      1 # '2015년 미세먼지 매우 나쁨' 일수만 가져오기\n      2 import matplotlib.pyplot as verybad2015\n----&gt; 3 verybad2015 = data.copy()\n      4 verybad2015 = verybad2015[['area', '2015_verybad']]\n      5 verybad2015\n\nNameError: name 'data' is not defined\n\n\n\n\n# 막대 그래프1\nplt.figure(figsize=(22, 4))\nplt.bar(verybad2015.index, verybad2015['count'], color='g')\nplt.xlabel('Area')\nplt.ylabel('Count')\nplt.title('2015 Fine Dust(PM10) - Very Bad Days By Area')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 대도시의 '2015-2020년 미세먼지 좋음' 일수만 가져오기\ndata6 = data.copy()\ndata6 = data6.loc['Seoul':'Ulsan', '2015_good':'2020_good']\ndata6\n\n\n    \n\n\n\n\n\n\n2015_good\n2016_good\n2017_good\n2018_good\n2019_good\n2020_good\n\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n# 대도시의 '2017-2020년 미세먼지 보통' 일수만 가져오기\ndata4 = data.copy()\ndata4 = data4.loc['Seoul':'Ulsan', '2017_common':'2020_common']\ndata4\n\n\n    \n\n\n\n\n\n\n2017_common\n2018_common\n2019_common\n2020_common\n\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nimport seaborn as sns\ndata = sns.load_dataset(\"iris\")\n\n\ndata\n\n\n    \n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\ndata['species'].unique()\n\narray(['setosa', 'versicolor', 'virginica'], dtype=object)\n\n\n\nplt.figure(figsize=(4,2))\nplt.scatter(data['petal_length'], data['petal_width'], color='orange', s=5)\nplt.xlabel('Petal Length')\nplt.ylabel('Petal width')\n\nText(0, 0.5, 'Petal width')\n\n\n\n\n\n\n\n\n\n\nsetosa = data.loc[data['species']=='setosa',]\n\n\n# 히스토그램\n\nplt.figure(figsize=(5, 3))\nplt.hist(setosa['petal_length'], bins=8, edgecolor='black')\nplt.xlabel('Petal Length')\nplt.ylabel('Count')\nplt.title('Distribution of Petal Length in Iris Setosa')\nplt.show()\n\n\n\n\n\n\n\n\n\n#상자수염 그래프 :\nplt.figure(figsize=(5,3))\nplt.boxplot(data['SepalLength'])\n\n\nfrom google.colab import files\nuploaded = files.upload()\nimport os, shutil\nos.makedirs('data', exist_ok=True)\nfor fname in uploaded.keys():\n    shutil.move(fname, f\"data/{fname}\")\nimport pandas as pd\n# 데이터 불러오기\ndata = pd.read_csv('./data/04_data2.csv')\ndata.head()\n\n\n     \n     \n      Upload widget is only available when the cell has been executed in the\n      current browser session. Please rerun this cell to enable.\n      \n       \n\n\nSaving 04_data2.csv to 04_data2.csv\n\n\n\n    \n\n\n\n\n\n\nSepalLength\nSepalWidth\nPetalLength\nPetalWidth\nSpecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\nimport matplotlib.pyplot as plt\nsetosa = data.loc[data['Species']=='setosa',]\n\nplt.figure(figsize=(5, 3))\nplt.title('Distribution of Petal Length in Iris Setosa')\nplt.hist(setosa['PetalLength'], bins=8, edgecolor='black')\nplt.xlabel('Petal Length')\nplt.ylabel('Count')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 상자수염 그래프 : 꽃받침 길이와 너비의 분포 비교\n# 꽃받침 길이는 꽃받침 너비보다 전체적으로 큰 값을 가지며, 변동 폭도 더 큼\n# 꽃받침 너비는 상대적으로 산포가 작고, 일부 이상값(outlier)이 존재함\nplt.figure(figsize=(5, 3))\nplt.boxplot([data['SepalLength'], data['SepalWidth']],\n            tick_labels=['Sepal Length', 'Sepal Width'],\n            vert=False, widths=0.5)\nplt.title('Sepal Length and Width')\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as figsize\nplt.figure(figsize=(5, 3))\nplt.boxplot([data['SepalLength'], data['SepalWidth']],\n            tick_labels=['Sepal Length', 'Sepal Width'],\n            vert=False, widths=0.5)\nplt.title('Sepal Length and Width')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Seaborn 라이브러리 설치\n#!pip install seaborn\n\n\n# Seaborn 라이브러리 불러오기\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport numpy as np\nimport pandas as pd\n\n\nfrom google.colab import files\nuploaded = files.upload()\nimport os, shutil\nos.makedirs('data', exist_ok=True)\nfor fname in uploaded.keys():\n    shutil.move(fname, f\"data/{fname}\")\n\n# 데이터 불러오기\ndata = pd.read_csv('./data/05_data1.csv')\ndata.head()\n\n\n     \n     \n      Upload widget is only available when the cell has been executed in the\n      current browser session. Please rerun this cell to enable.\n      \n       \n\n\nSaving 05_data1.csv to 05_data1.csv\n\n\n\n    \n\n\n\n\n\n\nno\ncity_code\ngender\nage_code\nheight\nweight\nwaist\nsystolic\ndiastolic\nblood_sugar\ncholesterol\ntriglycerides\nHDL\nLDL\nhemoglobin\nserum\nsmoking\ndrinking\n\n\n\n\n0\n1\n36\n1\n9\n165\n60\n72.1\n127\n79\n90\n188\n58\n58.0\n118\n15.0\n1.1\n1\n0\n\n\n1\n5\n41\n2\n12\n155\n50\n75.2\n144\n89\n110\n220\n171\n53.0\n133\n12.4\n0.7\n1\n0\n\n\n2\n6\n27\n1\n9\n185\n85\n94.0\n114\n72\n86\n234\n183\n50.0\n147\n16.4\n1.1\n3\n1\n\n\n3\n7\n44\n1\n9\n165\n80\n93.0\n112\n73\n250\n119\n265\n26.0\n40\n15.7\n0.7\n3\n1\n\n\n4\n9\n41\n2\n17\n150\n50\n82.0\n136\n65\n104\n177\n61\n63.0\n101\n13.3\n0.7\n1\n0\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\n# 데이터 전처리 : 라벨 매핑(label mapping)\n# replace() 함수는 명시되지 않은 값을 그대로 유지하지만,\n# map() 함수는 명시되지 않은 값을 NaN으로 처리함\ndata6 = data.copy()\ndata6 = data6.loc[:, ['gender', 'height', 'weight', 'waist', 'drinking', 'smoking']]\ndata6['gender'] = data['gender'].replace({1: 'M', 2: 'F'})\ndata6['drinking'] = data['drinking'].replace({0: 'Non-drinking', 1: 'Drinking'})\ndata6['smoking'] = data['smoking'].replace({1: 'Non-smoking', 2: 'Quit-smoking', 3: 'Smoking'})\ndata6.head()\n\n\n    \n\n\n\n\n\n\ngender\nheight\nweight\nwaist\ndrinking\nsmoking\n\n\n\n\n0\nM\n165\n60\n72.1\nNon-drinking\nNon-smoking\n\n\n1\nF\n155\n50\n75.2\nNon-drinking\nNon-smoking\n\n\n2\nM\n185\n85\n94.0\nDrinking\nSmoking\n\n\n3\nM\n165\n80\n93.0\nDrinking\nSmoking\n\n\n4\nF\n150\n50\n82.0\nNon-drinking\nNon-smoking\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndata.dtypes\n\n\n\n\n\n\n\n\n0\n\n\n\n\nno\nint64\n\n\ncity_code\nint64\n\n\ngender\nint64\n\n\nage_code\nint64\n\n\nheight\nint64\n\n\nweight\nint64\n\n\nwaist\nfloat64\n\n\nsystolic\nint64\n\n\ndiastolic\nint64\n\n\nblood_sugar\nint64\n\n\ncholesterol\nint64\n\n\ntriglycerides\nint64\n\n\nHDL\nfloat64\n\n\nLDL\nint64\n\n\nhemoglobin\nfloat64\n\n\nserum\nfloat64\n\n\nsmoking\nint64\n\n\ndrinking\nint64\n\n\n\n\ndtype: object\n\n\n\n# 데이터 전처리 : 라벨 매핑(label mapping)\n# replace() 함수는 명시되지 않은 값을 그대로 유지하지만,\n# map() 함수는 명시되지 않은 값을 NaN으로 처리함\ndata6 = data.copy()\ndata6 = data6.loc[:, ['gender', 'height', 'weight', 'waist', 'drinking', 'smoking']]\ndata6['gender'] = data['gender'].replace({1: 'M', 2: 'F'})\ndata6['drinking'] = data['drinking'].replace({0: 'Non-drinking', 1: 'Drinking'})\ndata6['smoking'] = data['smoking'].replace({1: 'Non-smoking', 2: 'Quit-smoking', 3: 'Smoking'})\ndata6.head()\n\n\n    \n\n\n\n\n\n\ngender\nheight\nweight\nwaist\ndrinking\nsmoking\n\n\n\n\n0\nM\n165\n60\n72.1\nNon-drinking\nNon-smoking\n\n\n1\nF\n155\n50\n75.2\nNon-drinking\nNon-smoking\n\n\n2\nM\n185\n85\n94.0\nDrinking\nSmoking\n\n\n3\nM\n165\n80\n93.0\nDrinking\nSmoking\n\n\n4\nF\n150\n50\n82.0\nNon-drinking\nNon-smoking\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\n#라벨 매핑\n# gender 1: m 2:fe\ndata6['gender'] = data6['gender'].map({1: 'Male', 2: 'Female'})\ndata6.head(3)\n\n/tmp/ipython-input-56-2272414527.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data6['gender'] = data6['gender'].map({1: 'Male', 2: 'Female'})\n\n\n\n    \n\n\n\n\n\n\ngender\nheight\nweight\nwaist\ndrinking\nsmoking\n\n\n\n\n0\nMale\n165\n60\n72.1\n0\n1\n\n\n1\nFemale\n155\n50\n75.2\n0\n1\n\n\n2\nMale\n185\n85\n94.0\n1\n3\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\n# 데이터 전처리 : 라벨 매핑(label mapping)\n# replace() 함수는 명시되지 않은 값을 그대로 유지하지만,\n# map() 함수는 명시되지 않은 값을 NaN으로 처리함\ndata6 = data.copy()\ndata6 = data6.loc[:, ['gender', 'height', 'weight', 'waist', 'drinking', 'smoking']]\ndata6['gender'] = data['gender'].replace({1: 'M', 2: 'F'})\ndata6['drinking'] = data['drinking'].replace({0: 'Non-drinking', 1: 'Drinking'})\ndata6['smoking'] = data['smoking'].replace({1: 'Non-smoking', 2: 'Quit-smoking', 3: 'Smoking'})\ndata6.head()\n\n\n    \n\n\n\n\n\n\ngender\nheight\nweight\nwaist\ndrinking\nsmoking\n\n\n\n\n0\nM\n165\n60\n72.1\nNon-drinking\nNon-smoking\n\n\n1\nF\n155\n50\n75.2\nNon-drinking\nNon-smoking\n\n\n2\nM\n185\n85\n94.0\nDrinking\nSmoking\n\n\n3\nM\n165\n80\n93.0\nDrinking\nSmoking\n\n\n4\nF\n150\n50\n82.0\nNon-drinking\nNon-smoking\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\n# 데이터 집계 :성별 음주 여부별 빈도\ndrinking = data6.groupby(['gender', 'drinking'])['drinking'].count()\ndrinking = drinking.to_frame(name='count')\ndrinking = drinking.reset_index()\ndrinking\n\n\n    \n\n\n\n\n\n\ngender\ndrinking\ncount\n\n\n\n\n0\nF\nDrinking\n611\n\n\n1\nF\nNon-drinking\n888\n\n\n2\nM\nDrinking\n1086\n\n\n3\nM\nNon-drinking\n415\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n# 데이터 집계 :성별 흡연 상태별 빈도\nsmoking = data6.groupby(['gender', 'smoking'])['smoking'].count()\nsmoking = smoking.to_frame(name='count')\nsmoking = smoking.reset_index()\nsmoking\n\n\n    \n\n\n\n\n\n\ngender\nsmoking\ncount\n\n\n\n\n0\nF\nNon-smoking\n1422\n\n\n1\nF\nQuit-smoking\n45\n\n\n2\nF\nSmoking\n32\n\n\n3\nM\nNon-smoking\n502\n\n\n4\nM\nQuit-smoking\n519\n\n\n5\nM\nSmoking\n480\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n# 데이터 집계 :성별 음주 여부별 빈도\ndrinking = data6.groupby(['gender', 'drinking'])['drinking'].count()\ndrinking = drinking.to_frame(name='count')\ndrinking = drinking.reset_index()\ndrinking\n\n\n    \n\n\n\n\n\n\ngender\ndrinking\ncount\n\n\n\n\n0\nF\nDrinking\n611\n\n\n1\nF\nNon-drinking\n888\n\n\n2\nM\nDrinking\n1086\n\n\n3\nM\nNon-drinking\n415\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nsns.barplot(x='gender', y='count', hue='drinking', data=drinking)\n\n\n\n\n\n\n\n\n\n# 막대 그래프 : 성별에 따른 음주 여부, 흡연 상태 분포\nfig = plt.figure(figsize=(8, 4))\narea1 = fig.add_subplot(1, 2, 1)\narea2 = fig.add_subplot(1, 2, 2)\n\nax1 = sns.barplot(x='gender', y='count', hue='drinking', data=drinking, ax=area1)\nax2 = sns.barplot(x='gender', y='count', hue='smoking', data=smoking, ax=area2)\n\nfig.suptitle('2020 Health Check Drinking & Smoking Type by Gender', fontweight='bold')\narea1.set_title('Drinking Type')\narea2.set_title('Smoking Type')\nplt.tight_layout(rect=[0, 0, 1, 0.99])\nplt.show()\n\n\n\n\n\n\n\n\n\n# 데이터 전처리 : 성별에 따라 데이터 분리\nmaledata = data6.copy()\nmaledata = maledata.loc[maledata['gender']=='M',:]\n\nfemaledata = data6.copy()\nfemaledata = femaledata.loc[femaledata['gender']=='F',:]\n\n\n# 히스토그램 : 성별에 따른 몸무게 분포\nplt.figure(figsize=(5, 3))\nsns.histplot(maledata['weight'], bins=8, alpha=0.7, label='Male', color='g')\nsns.histplot(femaledata['weight'], bins=8, alpha=0.7, label='Female', color='r')\nplt.xlim(20, 130)\nplt.xlabel('Weight')\nplt.ylabel('Count')\nplt.title('Distribution of Weight')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n# 두 막대 그래프에서 겹치는 부분 색깔 표시하기\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 예시용 데이터프레임 (실제 사용 시 maledata, femaledata를 불러와야 함)\n# 여기선 임의로 생성\nnp.random.seed(0)\nmaledata = pd.DataFrame({'weight': np.random.normal(75, 10, 500)})\nfemaledata = pd.DataFrame({'weight': np.random.normal(65, 8, 500)})\n\n# 공통 bin 정의\nbins = np.linspace(30, 110, 20)\n\n# 히스토그램 수치 계산 (density=False: count 기준)\nmale_hist, _ = np.histogram(maledata['weight'], bins=bins)\nfemale_hist, _ = np.histogram(femaledata['weight'], bins=bins)\n\n# 겹치는 부분\noverlap = np.minimum(male_hist, female_hist)\n\n# x 좌표 (bin 중심)\nbin_centers = (bins[:-1] + bins[1:]) / 2\nwidth = bins[1] - bins[0]\n\n# 시각화\nplt.figure(figsize=(7, 4))\nplt.bar(bin_centers, male_hist, width=width, alpha=0.5, color='green', label='Male', edgecolor='black')\nplt.bar(bin_centers, female_hist, width=width, alpha=0.5, color='red', label='Female', edgecolor='black')\nplt.bar(bin_centers, overlap, width=width, color='purple', label='Overlap')  # 겹치는 부분\n\nplt.xlim(30, 110)\nplt.xlabel('Weight')\nplt.ylabel('Count')\nplt.title('Distribution of Weight by Gender')\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# 히스토그램 & 커널 밀도 추정(KDE) : 성별에 따른 허리둘레 분포\nplt.figure(figsize=(5, 3))\nsns.histplot(maledata['waist'], bins=7, alpha=0.5, label='Male', kde=True)\nsns.histplot(femaledata['waist'], bins=7, alpha=0.5, label='Female', color='r', kde=True)\nplt.xlim(40,130)\nplt.xlabel('Waist')\nplt.ylabel('Count')\nplt.title('Distribution of Waist with KDE')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import gaussian_kde\n\n# 샘플 데이터 (실제 데이터에 맞게 대체)\nnp.random.seed(1)\nmaledata = pd.DataFrame({'waist': np.random.normal(85, 10, 300)})\nfemaledata = pd.DataFrame({'waist': np.random.normal(75, 8, 300)})\n\n# KDE 계산\nx_vals = np.linspace(40, 130, 500)\nkde_male = gaussian_kde(maledata['waist'])\nkde_female = gaussian_kde(femaledata['waist'])\n\ny_male = kde_male(x_vals)\ny_female = kde_female(x_vals)\n\n# 겹치는 부분 계산\ny_overlap = np.minimum(y_male, y_female)\n\n# 시각화\nplt.figure(figsize=(7, 4))\n\n# KDE 선\nplt.plot(x_vals, y_male, label='Male', color='green')\nplt.plot(x_vals, y_female, label='Female', color='red')\n\n# 겹치는 영역 색칠\nplt.fill_between(x_vals, y_overlap, color='purple', alpha=0.4, label='Overlap')\n\n# 설정\nplt.xlabel('Waist')\nplt.ylabel('Density')\nplt.title('KDE of Waist Circumference by Gender')\nplt.legend()\nplt.xlim(40, 130)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import gaussian_kde\n\n# 샘플 데이터\nnp.random.seed(1)\nmaledata = pd.DataFrame({'waist': np.random.normal(85, 10, 300)})\nfemaledata = pd.DataFrame({'waist': np.random.normal(75, 8, 300)})\n\n# KDE 계산용 x축\nx_vals = np.linspace(40, 130, 500)\nkde_male = gaussian_kde(maledata['waist'])\nkde_female = gaussian_kde(femaledata['waist'])\ny_male = kde_male(x_vals)\ny_female = kde_female(x_vals)\ny_overlap = np.minimum(y_male, y_female)\n\n# 시각화\nplt.figure(figsize=(7, 4))\n\n# 히스토그램 먼저 그리기\nsns.histplot(maledata['waist'], bins=15, color='green', alpha=0.4, label='Male', edgecolor='black')\nsns.histplot(femaledata['waist'], bins=15, color='red', alpha=0.4, label='Female', edgecolor='black')\n\n# KDE 라인 수동 추가\nplt.plot(x_vals, y_male * 300 * (130 - 40) / 15, color='green')  # 히스토그램 스케일에 맞춰 조정\nplt.plot(x_vals, y_female * 300 * (130 - 40) / 15, color='red')\n\n# 겹치는 부분 색칠 (KDE 기준)\nplt.fill_between(x_vals, y_overlap * 300 * (130 - 40) / 15, color='purple', alpha=0.4, label='KDE Overlap')\n\n# 설정\nplt.xlim(40, 130)\nplt.xlabel('Waist')\nplt.ylabel('Count')\nplt.title('Waist Distribution with KDE and Overlap')\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import gaussian_kde\n\n# 샘플 데이터\nnp.random.seed(1)\nmaledata = pd.DataFrame({'waist': np.random.normal(85, 10, 300)})\nfemaledata = pd.DataFrame({'waist': np.random.normal(75, 8, 300)})\n\n# 동일한 bin 설정 (막대 7개)\nbins = np.linspace(40, 130, 8)\nbin_width = bins[1] - bins[0]\n\n# KDE 계산\nx_vals = np.linspace(40, 130, 500)\nkde_male = gaussian_kde(maledata['waist'])\nkde_female = gaussian_kde(femaledata['waist'])\ny_male = kde_male(x_vals)\ny_female = kde_female(x_vals)\ny_overlap = np.minimum(y_male, y_female)\n\n# 스케일 조정\nscale = len(maledata) * bin_width  # count 기준으로 맞춤\n\n# 시각화\nplt.figure(figsize=(7, 4))\nsns.histplot(maledata['waist'], bins=bins, color='green', alpha=0.4, edgecolor='black', label='Male')\nsns.histplot(femaledata['waist'], bins=bins, color='red', alpha=0.4, edgecolor='black', label='Female')\n\nplt.plot(x_vals, y_male * scale, color='green')\nplt.plot(x_vals, y_female * scale, color='red')\nplt.fill_between(x_vals, y_overlap * scale, color='purple', alpha=0.4, label='KDE Overlap')\n\n# 설정\nplt.xlim(40, 130)\nplt.xlabel('Waist')\nplt.ylabel('Count')\nplt.title('Waist Distribution with KDE and Overlap')\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# 상자수염 그래프 : 성별 및 음주 여부에 따른 몸무게 분포\nplt.figure(figsize=(8, 4))\nplt.title('Weight By Gender and Drinking')\nsns.boxplot(x='drinking', y='weight', hue='gender', width=0.7, gap = 0.1, data=data6)\nplt.show()\n\n\n\n\n\n\n\n\n\n# 상자수염 그래프 : 성별 및 흡연 상태에 따른 몸무게 분포\nplt.figure(figsize=(8, 6))\nplt.title('Weight By Gender and Drinking')\nsns.boxplot(x='weight', y='smoking', hue='gender', width=0.7, gap=0.1, data=data6, orient='h')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 카운트 플롯1 : 음주 여부에 따른 성별 분포\nplt.figure(figsize=(5, 3))\nplt.title('Gender and Drinking')\nsns.countplot(x='drinking', hue='gender', data=data6)\nplt.show()\n\n\n\n\n\n\n\n\n\n# 카운트 플롯2 : 흡연 상태에 따른 성별 분포\nplt.figure(figsize=(5, 3))\nplt.title('Gender and Smoking')\nsns.countplot(y='smoking', hue='gender',\n              data=data6, order=['Smoking', 'Quit-smoking', 'Non-smoking'])\nplt.show()\n\n\n\n\n\n\n\n\n\n# 데이터 전처리 : 8개 건강 지표 선택\ndata8 = data.copy()\ndata8 = data8.loc[:, ['height', 'weight', 'waist',\n                      'systolic', 'diastolic', 'cholesterol', 'HDL', 'LDL']]\n\n\n# 히트맵 : 8개의 건강 지표 간 상관관계\n# 상관계수는 -1에서 +1 사이의 값을 가지므로,\n# vmin=-1, vmax=1 옵션 설정으로 색상 범위의 균형을 맞춤\ncorrelation_data8 = data8.corr()\nupp_mat = np.triu(correlation_data8)\n\nplt.figure(figsize=(8, 6))\nplt.title('Correlation Heatmap')\nsns.heatmap(correlation_data8, annot=True, mask=upp_mat, cmap='seismic', vmin=-1, vmax=1)\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\n# 스트립 플롯 : 키와 몸무게, 성별의 관계\nplt.figure(figsize=(8, 4))\nplt.title('Height vs Weight by Gender - Strip Plot')\nsns.stripplot(x='height', y='weight', hue='gender', alpha=0.5, palette='dark', data=femaledata)\nsns.stripplot(x='height', y='weight', hue='gender', alpha=0.5, palette='Set1', data=maledata)\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n# 데이터 전처리 : 남성, 여성 각각 100개 데이터 선택\nmaledata100 = maledata.head(100)\nfemaledata100 = femaledata.head(100)\n\n\n# 스웜 플롯 : 키와 몸무게, 성별의 관계\nplt.figure(figsize=(8, 4))\nplt.title('Height vs Weight by Gender - Swarm Plot')\nsns.stripplot(x='height', y='weight', hue='gender', alpha=0.5, palette='dark', data=femaledata100)\nsns.stripplot(x='height', y='weight', hue='gender', alpha=0.5, palette='Set1', data=maledata100)\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n# 바이올린 플롯1 : 성별 및 음주 여부별 몸무게(120 미만) 분포\nplt.figure(figsize=(5, 3))\nplt.title('Weight By Gender and Drinking (Under 120kg)')\nsns.violinplot(x='gender', y='weight', hue='drinking', gap=0.1, data=data6[data6.weight&lt;120])\nplt.show()\n# 상자수염 그래프와 밀도 곡선을 합친 것\n\n\n\n\n\n\n\n\n\n# 바이올린 플롯2 : 성별 및 음주 여부별 허리둘레(150 미만) 분포\nplt.figure(figsize=(5, 5))\nplt.title('Waist By Gender and Drinking (Under 150cm)')\nsns.violinplot(y='gender', x='waist', hue='drinking', gap=0.1, data=data6[data6.waist&lt;150])\nplt.show()\n\n\n\n\n\n\n\n\n\n# 상관관계 그래프\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# 샘플 데이터\ndf = pd.DataFrame({\n    'height': [160, 165, 170, 175, 180],\n    'weight': [55, 60, 65, 70, 75]\n})\n\n# 산점도\nsns.scatterplot(data=df, x='height', y='weight')\nplt.title('Height vs Weight')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 회귀분석 그래프\nsns.regplot(data=df, x='height', y='weight')  # 회귀선 포함 # 상관 관계 그래프: 선형관계를 보이는 점들 # 회귀 분석 그래프: +직선\nplt.title('Regression: Predicting Weight from Height')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 전공별 성적 나타내기\nimport pandas as pd\nimport numpy as np\ndata = {'학번' : range(2000, 2010), '성적' : [85, 95, 75, 70, 100, 100, 95, 85, 80, 85], '전공': ['컴퓨터 공학', np.nan, np.nan, '전자공학', '화학공학', '통계학', '건축공학', '식품공학', '컴퓨터공학', np.nan]}\ndf=pd.DataFrame(data)\ndf=df.fillna(df['전공'].mode()[0])\ndf['전공']\n\n\n\n\n\n\n\n\n전공\n\n\n\n\n0\n컴퓨터 공학\n\n\n1\n건축공학\n\n\n2\n건축공학\n\n\n3\n전자공학\n\n\n4\n화학공학\n\n\n5\n통계학\n\n\n6\n건축공학\n\n\n7\n식품공학\n\n\n8\n컴퓨터공학\n\n\n9\n건축공학\n\n\n\n\ndtype: object\n\n\n\nimport pandas as pd\nimport numpy as np\ndata = {'학번'}\n\n\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom google.colab import files\nuploaded = files.upload()\nimport os, shutil\nos.makedirs('data', exist_ok=True)\nfor fname in uploaded.keys():\n    shutil.move(fname, f\"data/{fname}\")\n\ndf2021 = pd.read_csv('./data/2021.csv', index_col=0)\ndf2021.head(3)\n\n\n     \n     \n      Upload widget is only available when the cell has been executed in the\n      current browser session. Please rerun this cell to enable.\n      \n       \n\n\nSaving 2021.csv to 2021.csv\n\n\n\n    \n\n\n\n\n\n\nCountry name\nHappiness score\nupperwhisker\nlowerwhisker\nGDP per capita\nSocial support\nHealthy life expectancy\nFreedom to make life choices\nGenerosity\nDystopia\n\n\nRank\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\nFinland\n7.842\n7.904\n7.780\n10.775\n0.954\n72.0\n0.949\n-0.098\n3.253\n\n\n2\nDenmark\n7.620\n7.687\n7.552\n10.933\n0.954\n72.7\n0.946\n0.030\n2.868\n\n\n3\nSwitzerland\n7.571\n7.643\n7.500\n11.117\n0.942\n74.4\n0.919\n0.025\n2.839\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\n# 데이터 불러오기\ndf2021 = pd.read_csv('./data/2021.csv', index_col='Rank')\n\n\n# 데이터 전처리 : 열 삭제\ndf2021.drop(columns=['upperwhisker', 'lowerwhisker', 'Dystopia'], inplace=True)\n\n\n# 데이터 전처리 : 열 이름 변경\ndf2021.columns = ['Country', 'Score', 'GDP_per_capita', 'Social_support', 'Life_expectancy', 'Freedom', 'Generosity']\n\n\n# 2020년 데이터 전처리\ndf1 = df2021.copy()\ndf1.drop(['Social_support', 'Life_expectancy', 'Generosity'], axis=1, inplace=True)\ndf1.head()\n\n\n    \n\n\n\n\n\n\nCountry\nScore\nGDP_per_capita\nFreedom\n\n\nRank\n\n\n\n\n\n\n\n\n1\nFinland\n7.842\n10.775\n0.949\n\n\n2\nDenmark\n7.620\n10.933\n0.946\n\n\n3\nSwitzerland\n7.571\n11.117\n0.919\n\n\n4\nIceland\n7.554\n10.878\n0.955\n\n\n5\nNetherlands\n7.464\n10.932\n0.913\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\nplt.figure(figsize=(3,2))\nsns.pairplot(df1)\nplt.show()\n\n&lt;Figure size 300x200 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n## 상관계수\n# 행복지수와 GDP 간 상관계수는 0.79로 나타남 -&gt; 강한 양의 상관관계\n# 행복지수와 Freedom 간 상관계수는 0.61로 나타남 -&gt; 뚜렷한 양의 상관관계\ncorr = df1[['Score', 'GDP_per_capita', 'Freedom']].corr()\n\n\n# 히트맵 : 2020년 데이터\nplt.figure(figsize=(6, 4))\nsns.heatmap(corr, annot=True, cmap='Blues') # vmin=-1, vmax=1)\nplt.show()\n\n\n\n\n\n\n\n\n\ndf2020\n\n\n    \n\n\n\n\n\n\nCountry name\nHappiness score\nupperwhisker\nlowerwhisker\nGDP per capita\nSocial support\nHealthy life expectancy\nFreedom to make life choices\nGenerosity\nDystopia\n\n\nRank\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\nFinland\n7.8087\n7.869766\n7.747634\n10.639267\n0.954330\n71.900825\n0.949172\n-0.059482\n2.762835\n\n\n2\nDenmark\n7.6456\n7.711245\n7.579955\n10.774001\n0.955991\n72.402504\n0.951444\n0.066202\n2.432741\n\n\n3\nSwitzerland\n7.5599\n7.628528\n7.491272\n10.979933\n0.942847\n74.102448\n0.921337\n0.105911\n2.350267\n\n\n4\nIceland\n7.5045\n7.621347\n7.387653\n10.772559\n0.974670\n73.000000\n0.948892\n0.246944\n2.460688\n\n\n5\nNorway\n7.4880\n7.556281\n7.419719\n11.087804\n0.952487\n73.200783\n0.955750\n0.134533\n2.168266\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n149\nCentral African Republic\n3.4759\n3.701658\n3.250141\n6.625160\n0.319460\n45.200001\n0.640881\n0.082410\n2.860198\n\n\n150\nRwanda\n3.3123\n3.415053\n3.209547\n7.600104\n0.540835\n61.098846\n0.900589\n0.055484\n0.548445\n\n\n151\nZimbabwe\n3.2992\n3.414202\n3.184198\n7.865712\n0.763093\n55.617260\n0.711458\n-0.072064\n0.841031\n\n\n152\nSouth Sudan\n2.8166\n3.027516\n2.605684\n7.425360\n0.553707\n51.000000\n0.451314\n0.016519\n1.378751\n\n\n153\nAfghanistan\n2.5669\n2.628270\n2.505530\n7.462861\n0.470367\n52.590000\n0.396573\n-0.096429\n1.507236\n\n\n\n\n153 rows × 10 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n# 데이터 불러오기: 이대로 하기\ndf2020 = pd.read_csv('./data/2020.csv', index_col=0)\ndf2021 = pd.read_csv('./data/2021.csv', index_col=0)\n\n# 데이터 전처리 : 열 이름 변경\n# 데이터 전처리 : 열 삭제\ndf2020.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\ndf2021.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\n\ndf2020.columns = ['Country', 'Score', 'GDP.per.capita', 'Social.support', 'Life.expectancy', 'Freedom', 'Generosity']\ndf2021.columns = ['Country', 'Score', 'GDP.per.capita', 'Social.support', 'Life.expectancy', 'Freedom', 'Generosity']\n\n# 데이터 전처리\nx1 = df2020[['Generosity', 'Social.support', 'Score']].copy()\nx2 = df2021[['Generosity', 'Social.support', 'Score']].copy()\n\n\n# 히트맵 : 2021년 데이터\na2 = x2.corr()\nplt.figure(figsize=(6, 4))\nsns.heatmap(a2, annot=True, cmap='GnBu')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 전체 상관계수 : 2020년 데이터\ncorr = df2020.select_dtypes(include='number').corr()\n\nplt.figure(figsize=(8, 6))\nupp_mat = np.triu(corr)\nsns.heatmap(corr, mask=upp_mat,vmin=-1, vmax=1, annot=True, cmap ='RdYlBu_r', linewidths=4)\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\n# 한글 깨짐 현상에 대한 해결 방법\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nplt.rc('font', family='Malgun Gothic')\nmpl.rcParams['axes.unicode_minus'] = False\n\n\n# scikit-learn 설치하기\n#!pip install scikit-learn\n\n\n# sklearn의 linear_model 모듈에서 LinearRegression 클래스 불러오기\nfrom sklearn.linear_model import LinearRegression\n\n\n# 1. 나눔 폰트 설치\n#!sudo apt-get install -y fonts-nanum\n#!sudo fc-cache -fv\n#!rm ~/.cache/matplotlib -rf\n\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following NEW packages will be installed:\n  fonts-nanum\n0 upgraded, 1 newly installed, 0 to remove and 35 not upgraded.\nNeed to get 10.3 MB of archives.\nAfter this operation, 34.1 MB of additional disk space will be used.\nGet:1 http://archive.ubuntu.com/ubuntu jammy/universe amd64 fonts-nanum all 20200506-1 [10.3 MB]\nFetched 10.3 MB in 1s (8,191 kB/s)\ndebconf: unable to initialize frontend: Dialog\ndebconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 78, &lt;&gt; line 1.)\ndebconf: falling back to frontend: Readline\ndebconf: unable to initialize frontend: Readline\ndebconf: (This frontend requires a controlling tty.)\ndebconf: falling back to frontend: Teletype\ndpkg-preconfigure: unable to re-open stdin: \nSelecting previously unselected package fonts-nanum.\n(Reading database ... 126284 files and directories currently installed.)\nPreparing to unpack .../fonts-nanum_20200506-1_all.deb ...\nUnpacking fonts-nanum (20200506-1) ...\nSetting up fonts-nanum (20200506-1) ...\nProcessing triggers for fontconfig (2.13.1-4.2ubuntu5) ...\n/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n/usr/share/fonts/truetype/nanum: caching, new cache contents: 12 fonts, 0 dirs\n/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n/root/.local/share/fonts: skipping, no such directory\n/root/.fonts: skipping, no such directory\n/usr/share/fonts/truetype: skipping, looped directory detected\n/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n/var/cache/fontconfig: cleaning cache directory\n/root/.cache/fontconfig: not cleaning non-existent cache directory\n/root/.fontconfig: not cleaning non-existent cache directory\nfc-cache: succeeded\n\n\n\n## 공부 시간(독립변수)에 따른 시험 성적(종속변수)의 변화\n# 데이터프레임 생성\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.DataFrame({\n    'study_time': [2, 4, 6, 8, 10],\n    'score': [81, 93, 90, 97, 100]\n})\n\n# 산점도 : 두 변수 간 상관관계 확인\nplt.figure(figsize=(5, 3))\nplt.scatter(data['study_time'], data['score'])\nplt.xlabel('Study Time (hours)')\nplt.ylabel('Score')\nplt.show()\n\n# 독립변수, 종속변수 분리\n# scikit-Learn에서 입력 데이터(feature)를 2차원 배열로 요구함\nX = data[['study_time']]\ny = data['score']\n\n# 선형 회귀모형 객체 생성 및 학습\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# 7시간 공부했을 때, 시험 점수 예측\nnewdata = pd.DataFrame({'study_time': [7]})\npredicted_score = model.predict(newdata)\nprint(predicted_score)\n\n\n\n\n\n\n\n\n[94.3]\n\n\n\n# 데이터 불러오기\nfrom sklearn.datasets import fetch_california_housing\ndata = fetch_california_housing(as_frame=True)\ndf = data.frame\ndf.head()\n\n\n    \n\n\n\n\n\n\nMedInc\nHouseAge\nAveRooms\nAveBedrms\nPopulation\nAveOccup\nLatitude\nLongitude\nMedHouseVal\n\n\n\n\n0\n8.3252\n41.0\n6.984127\n1.023810\n322.0\n2.555556\n37.88\n-122.23\n4.526\n\n\n1\n8.3014\n21.0\n6.238137\n0.971880\n2401.0\n2.109842\n37.86\n-122.22\n3.585\n\n\n2\n7.2574\n52.0\n8.288136\n1.073446\n496.0\n2.802260\n37.85\n-122.24\n3.521\n\n\n3\n5.6431\n52.0\n5.817352\n1.073059\n558.0\n2.547945\n37.85\n-122.25\n3.413\n\n\n4\n3.8462\n52.0\n6.281853\n1.081081\n565.0\n2.181467\n37.85\n-122.25\n3.422\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\n# 요약 통계량 확인\ndf_train = pd.DataFrame(data=X_train, columns=california.feature_names)\ndf_train['MedHouseVal'] = y_train\ndf_train.describe()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "project1.html",
    "href": "project1.html",
    "title": "project1 : 주택 가격 예측",
    "section": "",
    "text": "scikit-learn에서 제공하는 캘리포니아 주택 가격 데이터\n1990년대 캘리포니아 지역의 주택 가격에 대한 데이터\n총 20,640개의 관측값과 8개의 독립변수(feature), 1개의 종속변수(target)으로 구성됨\n\n\nfrom sklearn.datasets import fetch_california_housing\ndata = fetch_california_housing(as_frame=True)\n\n\ndf = data.frame # 표 형태로 바꾸기\ndf.head()\n\n\n\n\n\n\n\n\nMedInc\nHouseAge\nAveRooms\nAveBedrms\nPopulation\nAveOccup\nLatitude\nLongitude\nMedHouseVal\n\n\n\n\n0\n8.3252\n41.0\n6.984127\n1.023810\n322.0\n2.555556\n37.88\n-122.23\n4.526\n\n\n1\n8.3014\n21.0\n6.238137\n0.971880\n2401.0\n2.109842\n37.86\n-122.22\n3.585\n\n\n2\n7.2574\n52.0\n8.288136\n1.073446\n496.0\n2.802260\n37.85\n-122.24\n3.521\n\n\n3\n5.6431\n52.0\n5.817352\n1.073059\n558.0\n2.547945\n37.85\n-122.25\n3.413\n\n\n4\n3.8462\n52.0\n6.281853\n1.081081\n565.0\n2.181467\n37.85\n-122.25\n3.422\n\n\n\n\n\n\n\n\n# 데이터 확인\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 20640 entries, 0 to 20639\nData columns (total 9 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   MedInc       20640 non-null  float64\n 1   HouseAge     20640 non-null  float64\n 2   AveRooms     20640 non-null  float64\n 3   AveBedrms    20640 non-null  float64\n 4   Population   20640 non-null  float64\n 5   AveOccup     20640 non-null  float64\n 6   Latitude     20640 non-null  float64\n 7   Longitude    20640 non-null  float64\n 8   MedHouseVal  20640 non-null  float64\ndtypes: float64(9)\nmemory usage: 1.4 MB\n\n\n\n# 데이터 전처리 : 결측값 확인\ndf.isna().sum()\n\nMedInc         0\nHouseAge       0\nAveRooms       0\nAveBedrms      0\nPopulation     0\nAveOccup       0\nLatitude       0\nLongitude      0\nMedHouseVal    0\ndtype: int64"
  },
  {
    "objectID": "project1.html#데이터",
    "href": "project1.html#데이터",
    "title": "project1 : 주택 가격 예측",
    "section": "",
    "text": "scikit-learn에서 제공하는 캘리포니아 주택 가격 데이터\n1990년대 캘리포니아 지역의 주택 가격에 대한 데이터\n총 20,640개의 관측값과 8개의 독립변수(feature), 1개의 종속변수(target)으로 구성됨\n\n\nfrom sklearn.datasets import fetch_california_housing\ndata = fetch_california_housing(as_frame=True)\n\n\ndf = data.frame # 표 형태로 바꾸기\ndf.head()\n\n\n\n\n\n\n\n\nMedInc\nHouseAge\nAveRooms\nAveBedrms\nPopulation\nAveOccup\nLatitude\nLongitude\nMedHouseVal\n\n\n\n\n0\n8.3252\n41.0\n6.984127\n1.023810\n322.0\n2.555556\n37.88\n-122.23\n4.526\n\n\n1\n8.3014\n21.0\n6.238137\n0.971880\n2401.0\n2.109842\n37.86\n-122.22\n3.585\n\n\n2\n7.2574\n52.0\n8.288136\n1.073446\n496.0\n2.802260\n37.85\n-122.24\n3.521\n\n\n3\n5.6431\n52.0\n5.817352\n1.073059\n558.0\n2.547945\n37.85\n-122.25\n3.413\n\n\n4\n3.8462\n52.0\n6.281853\n1.081081\n565.0\n2.181467\n37.85\n-122.25\n3.422\n\n\n\n\n\n\n\n\n# 데이터 확인\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 20640 entries, 0 to 20639\nData columns (total 9 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   MedInc       20640 non-null  float64\n 1   HouseAge     20640 non-null  float64\n 2   AveRooms     20640 non-null  float64\n 3   AveBedrms    20640 non-null  float64\n 4   Population   20640 non-null  float64\n 5   AveOccup     20640 non-null  float64\n 6   Latitude     20640 non-null  float64\n 7   Longitude    20640 non-null  float64\n 8   MedHouseVal  20640 non-null  float64\ndtypes: float64(9)\nmemory usage: 1.4 MB\n\n\n\n# 데이터 전처리 : 결측값 확인\ndf.isna().sum()\n\nMedInc         0\nHouseAge       0\nAveRooms       0\nAveBedrms      0\nPopulation     0\nAveOccup       0\nLatitude       0\nLongitude      0\nMedHouseVal    0\ndtype: int64"
  },
  {
    "objectID": "project1.html#단위-달러",
    "href": "project1.html#단위-달러",
    "title": "project1 : 주택 가격 예측",
    "section": "단위 : 달러",
    "text": "단위 : 달러\n\n표준편차 : 11만\n중위 주택 가격의 평균 : 20만\n중위 주택 가격 m : 1만 4천, q1 : 11만 9천, 중앙값 : 17만 9천, q3 : 26만, M : 50만\n\n\n# 요약 통계량 확인\nimport pandas as pd\ndf_train = pd.DataFrame(data=X_train, columns=california.feature_names)\ndf_train['MedHouseVal'] = y_train\ndf_train.describe()\n\n\n\n\n\n\n\n\nMedInc\nHouseAge\nAveRooms\nAveBedrms\nPopulation\nAveOccup\nLatitude\nLongitude\nMedHouseVal\n\n\n\n\ncount\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n\n\nmean\n3.876892\n28.575374\n5.438125\n1.098033\n1427.927326\n3.119236\n35.650669\n-119.584102\n2.069240\n\n\nstd\n1.904908\n12.613634\n2.453569\n0.447498\n1140.225190\n12.373636\n2.135742\n2.002930\n1.157492\n\n\nmin\n0.499900\n1.000000\n0.888889\n0.333333\n3.000000\n0.692308\n32.550000\n-124.350000\n0.149990\n\n\n25%\n2.567225\n18.000000\n4.448928\n1.006783\n791.000000\n2.430380\n33.940000\n-121.800000\n1.193000\n\n\n50%\n3.539100\n29.000000\n5.232422\n1.049492\n1168.000000\n2.817147\n34.270000\n-118.510000\n1.793000\n\n\n75%\n4.758075\n37.000000\n6.060692\n1.100328\n1727.000000\n3.279135\n37.720000\n-118.010000\n2.646000\n\n\nmax\n15.000100\n52.000000\n141.909091\n25.636364\n35682.000000\n1243.333333\n41.950000\n-114.310000\n5.000010\n\n\n\n\n\n\n\n\nplt.figure(figsize=(6, 4))\nsns.histplot(df_train['MedHouseVal'], color='purple', alpha=0.5)\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(7, 1))\nsns.boxplot(x='MedHouseVal', color='m', data=df_train)\nplt.show()\n\n\n\n\n\n\n\n\n\n# 산점도\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.pairplot(df_train, height=0.8, plot_kws={'s': 5}, diag_kind='kde')\nplt.show()\n\n\n\n\n\n\n\n\n\ndf_train\n\n\n\n\n\n\n\n\nMedInc\nHouseAge\nAveRooms\nAveBedrms\nPopulation\nAveOccup\nLatitude\nLongitude\nMedHouseVal\n\n\n\n\n0\n4.1312\n35.0\n5.882353\n0.975490\n1218.0\n2.985294\n33.93\n-118.02\n1.93800\n\n\n1\n2.8631\n20.0\n4.401210\n1.076613\n999.0\n2.014113\n32.79\n-117.09\n1.69700\n\n\n2\n4.2026\n24.0\n5.617544\n0.989474\n731.0\n2.564912\n34.59\n-120.14\n2.59800\n\n\n3\n3.1094\n14.0\n5.869565\n1.094203\n302.0\n2.188406\n39.26\n-121.00\n1.36100\n\n\n4\n3.3068\n52.0\n4.801205\n1.066265\n1526.0\n2.298193\n37.77\n-122.45\n5.00001\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14443\n6.3700\n35.0\n6.129032\n0.926267\n658.0\n3.032258\n33.78\n-117.96\n2.29200\n\n\n14444\n3.0500\n33.0\n6.868597\n1.269488\n1753.0\n3.904232\n34.02\n-117.43\n0.97800\n\n\n14445\n2.9344\n36.0\n3.986717\n1.079696\n1756.0\n3.332068\n34.03\n-118.38\n2.22100\n\n\n14446\n5.7192\n15.0\n6.395349\n1.067979\n1777.0\n3.178891\n37.58\n-121.96\n2.83500\n\n\n14447\n2.5755\n52.0\n3.402576\n1.058776\n2619.0\n2.108696\n37.77\n-122.42\n3.25000\n\n\n\n\n14448 rows × 9 columns\n\n\n\n\n# 상관분석\nimport numpy as np\ncorr_train = df_train.corr()\nupp_mat = np.triu(corr_train)\n\nplt.figure(figsize=(12, 9))\nsns.heatmap(corr_train, annot=True, mask=upp_mat, cmap='bwr', vmin=-1, vmax=1)\nplt.title('Correlation Matrix')\nplt.show()\n\n\n\n\n\n\n\n\n\n중위 주택 가격은 지역 중위 소득과 강한 양의 상관관계 존재\n또한 주택 연식, 가구당 평균 방 개수, 위도 간에도 약한 양의 상관관계\n중위 주택 가격을 예측하는 특성으로 해당 변수 선택\n\n\n# 상관관계가 강한 독립변수 선택\n# scikit-learn에서 입력 데이터(feature)를 2차원 배열로 요구함\nfeatures = ['MedInc', 'HouseAge', 'AveRooms', 'Latitude']\ntarget = 'MedHouseVal'\n\nX_train = df_train[features]\ny_train = df_train[target]\n\n\n# 평가 데이터에서도 훈련 데이터에서 사용한 독립변수만 선택\ndf_test = pd.DataFrame(data=X_test, columns=california.feature_names)\ndf_test['MedHouseVal'] = y_test\nX_test = df_test[features]\n\n\n# 선형 회귀모델 생성 및 학습\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 회귀모델 평가 : 결정계수, MSE\nfrom sklearn.metrics import mean_squared_error, r2_score\ny_pred = model.predict(X_test)\nR2 = r2_score(y_test, y_pred)\nRMSE = np.sqrt(mean_squared_error(y_test, y_pred))\n\nprint(f\"결정계수 : {R2:.3f}\")\nprint(f\"RMSE : {RMSE:.3f}\")\n\n결정계수 : 0.520\nRMSE : 0.794\n\n\n\n# 회귀계수\ndf_coef = pd.DataFrame({'Feature': features, 'Coefficient': model.coef_})\n(df_coef)\n\n\n\n\n\n\n\n\nFeature\nCoefficient\n\n\n\n\n0\nMedInc\n0.435658\n\n\n1\nHouseAge\n0.016937\n\n\n2\nAveRooms\n-0.019505\n\n\n3\nLatitude\n-0.045071\n\n\n\n\n\n\n\n\n회귀계수를 살펴보면 지역 중위 소득이 1만 달러 증가할수록 중위 주택 가격은 4만 3천 달러 증가하는 것으로 나타남. 이는 경제적으로 여유가 있을수록 좋은 집에 거주함을 경햐이 있음을 보임\n주택 연식이 1년 증가하면 중위 주택 가격은 1693달러 증가하는 것으로 나타남\n가구당 평균 방 개수가 1개 증가하면 중위주택 가격은 1950달러 감소함\n위도가 1도 증가하면 중위 주택 가격은 4507달러 감소하는 경향이 있음. 이는 일반적으로 캘리포니아주는 남부 지역이 상대적으로 대도시가 많아 주택 가격이 더 높은 것을 반영하는 것으로 판단됨\n\n\n# statsmodels 라이브러리 설치\n#!pip install statsmodels\n\n\n# [참고] 회귀계수의 유의성\nimport statsmodels.api as sm\n\nX_train_const = sm.add_constant(X_train)\nols_model = sm.OLS(y_train, X_train_const).fit()\nprint(ols_model.summary())\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:            MedHouseVal   R-squared:                       0.519\nModel:                            OLS   Adj. R-squared:                  0.518\nMethod:                 Least Squares   F-statistic:                     3890.\nDate:                Thu, 24 Jul 2025   Prob (F-statistic):               0.00\nTime:                        11:50:47   Log-Likelihood:                -17332.\nNo. Observations:               14448   AIC:                         3.467e+04\nDf Residuals:                   14443   BIC:                         3.471e+04\nDf Model:                           4                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst          1.6091      0.115     13.957      0.000       1.383       1.835\nMedInc         0.4357      0.004    116.405      0.000       0.428       0.443\nHouseAge       0.0169      0.001     31.487      0.000       0.016       0.018\nAveRooms      -0.0195      0.003     -6.652      0.000      -0.025      -0.014\nLatitude      -0.0451      0.003    -14.213      0.000      -0.051      -0.039\n==============================================================================\nOmnibus:                     3079.717   Durbin-Watson:                   1.979\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             8182.373\nSkew:                           1.148   Prob(JB):                         0.00\nKurtosis:                       5.884   Cond. No.                         809.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nX_test = X_test[features]\n\ny_pred = model.predict(X_test)\n# RMSE, 결정계수\nfrom sklearn.metrics import mean_squared_error, r2_score\nRMSE = np.sqrt(mean_squared_error(y_test, y_pred))\nR2 = r2_score(y_test, y_pred)\n\n\nRMSE는 0.794로, 주택 중위 가격의 실제값과 예측값이 평균적으로 약 8만 달러 차이가 있다는 것을 의미함\n학습 데이터에서 주택 중위 가격의 평균이 약 20만 달러인 점을 고려하면, 모델의 평균 오차는 약 30% 수준임을 알 수 있음\n따라서 평균 오차가 비교적 큰 편이므로, 모델 성능 개선이 필요한 것으로 판단됨\n결정계수는 52.0%로 나타남\n\n\nimport seaborn as sns\n\n\ndf = sns.load_dataset(\"iris\")\n\n\ndf\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 150 entries, 0 to 149\nData columns (total 5 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   sepal_length  150 non-null    float64\n 1   sepal_width   150 non-null    float64\n 2   petal_length  150 non-null    float64\n 3   petal_width   150 non-null    float64\n 4   species       150 non-null    object \ndtypes: float64(4), object(1)\nmemory usage: 6.0+ KB\n\n\n\n# \ndf.isna().sum()\n\nsepal_length    0\nsepal_width     0\npetal_length    0\npetal_width     0\nspecies         0\ndtype: int64\n\n\n\nX = df.drop(columns = \"species\")\ny = df[\"species\"]\n\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n\ndf_train = pd.concat([X_train, y_train], axis=1)\n\nsns.boxplot(x='species', y='sepal_length', data=df_train)\nplt.ylabel('')\n\nText(0, 0.5, '')\n\n\n\n\n\n\n\n\n\n\nsns.pairplot(X_train, height=2)\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(5, 3))\nsns.boxplot(y='species', x='sepal_length', hue='species', data=df_train)\nplt.ylabel('')\n\nText(0, 0.5, '')\n\n\n\n\n\n\n\n\n\n\nsns.pairplot(df_train, hue='species', height=2)\n\n\n\n\n\n\n\n\n\n \n\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\nk_range = range(1, 20, 2)\nk_score = []\n\nfor k in k_range(1, 2):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn, X_train, y_train, cv=5, scoring='accuracy')\n    k_scores.append(scores.mean())\n    print(f'k={k}일 때 정확도 : {scores.mean():.3f}')\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-141-e4abced1d2fc&gt; in &lt;module&gt;\n      5 k_score = []\n      6 \n----&gt; 7 for k in k_range(1, 2):\n      8     knn = KNeighborsClassifier(n_neighbors=k)\n      9     scores = cross_val_score(knn, X_train, y_train, cv=5, scoring='accuracy')\n\nTypeError: 'range' object is not callable\n\n\n\n\nbest_k = k_range[k_scores.index(max(k_scores))]\nprint(f\"최적의 k의 값은 {best_k}이며, 평균 정확도는 {max(k_scores):.3f}\")\n\n\n  File \"&lt;ipython-input-127-464914cff1ed&gt;\", line 2\n    print(f\"최적의 k의 값은 {best_k}이며, 평균 정확도는 {max(k_scores):.3f}\n                                                             ^\nSyntaxError: EOL while scanning string literal\n\n\n\n\n\nknn = from sklearn.neighbors import KNeighborsClassifier(n_neighbors=k)\nknn.flt(X_train, y_train)\n\ny_pred = knn.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\n\n\n  File \"&lt;ipython-input-132-478f26fe98a6&gt;\", line 1\n    knn = from sklearn.neighbors import KNeighborsClassifier(n_neighbors=k)\n          ^\nSyntaxError: invalid syntax"
  }
]